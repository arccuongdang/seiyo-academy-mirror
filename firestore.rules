rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn() {
      return request.auth != null;
    }

    // ===== Users self-scope =====
    match /users/{uid} {
      // The owner can read and write their own user document.
      allow read, create, update: if signedIn() && request.auth.uid == uid;
      allow delete: if false;

      // Any subcollection under users/{uid} (e.g., attempts, wrongs, sessions, etc.)
      match /{coll}/{docId} {
        // The owner can read/write their own subcollection docs.
        allow read, create, update: if signedIn() && request.auth.uid == uid;
        allow delete: if false;
      }
    }

    // ===== Courses =====
    // Allow reading a course if public OR the user is a member: courses/{courseId}/members/{uid}
    match /courses/{courseId} {
      allow read: if signedIn() && (
        resource.data.public == true ||
        exists(/databases/$(database)/documents/courses/$(courseId)/members/$(request.auth.uid))
      );
      allow write: if false;

      // Members subcollection: users can read their own membership doc (useful for UI)
      match /members/{uid} {
        allow read: if signedIn() && request.auth.uid == uid;
        allow write: if false;
      }
    }

    // ===== Optional top-level enrollments (if used) =====
    // Keep this permissive for the owner to read their own enrollment rows.
    match /enrollments/{enrId} {
      allow read: if signedIn() && resource.data.userId == request.auth.uid;
      allow write: if false;
    }

    // ===== Fallback: deny everything else =====
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
