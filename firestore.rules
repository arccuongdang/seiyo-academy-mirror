rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Minimal array check: Firestore rules don't support arrow functions / .every().
    function isStringList(arr) {
      return arr is list;
    }

    function isValidAttempt(d) {
      return
        (d.userId is string) &&
        (d.courseId is string) &&
        (d.subjectId is string) &&
        (d.total is number && d.total >= 1) &&
        (!('score' in d) || (d.score is number && d.score >= 0 && d.score <= d.total)) &&
        (!('correct' in d) || (d.correct is number && d.correct >= 0 && d.correct <= d.total)) &&
        (!('mode' in d) || (d.mode is string && (d.mode == 'subject' || d.mode == 'year'))) &&
        (!('examYear' in d) || (d.examYear is number)) &&
        (!('durationSec' in d) || (d.durationSec is number && d.durationSec >= 0)) &&
        (!('tags' in d) || isStringList(d.tags));
    }

    // User-scoped docs
    match /users/{uid} {
      // Profile doc (optional)
      allow read, write: if isOwner(uid);

      // Attempt sessions (temporary state while practicing)
      match /attemptSessions/{sid} {
        allow read, write: if isOwner(uid);
      }

      // Finalized attempts (per-user subcollection)
      match /attempts/{aid} {
        allow read: if isOwner(uid);
        allow create: if isOwner(uid) && isValidAttempt(request.resource.data);
        allow update, delete: if isOwner(uid) && isValidAttempt(request.resource.data);
      }

      // Wrong / flagged questions by user
      match /wrongs/{qid} {
        allow read, write: if isOwner(uid);
      }
    }

    // (Optional, reserved) â€” root attempts collection for future global analytics.
    // Disabled by default.
    match /attempts/{id} {
      allow read, write: if false;
    }
  }
}
